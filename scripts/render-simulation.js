#!/usr/bin/env node

import { spawn } from 'child_process';
import fetch from 'node-fetch';

console.log('üé≠ Simulando ambiente de produ√ß√£o do Render...\n');

// Simular vari√°veis de ambiente do Render
const renderEnv = {
  NODE_ENV: 'production',
  PORT: '3002',
  DATABASE_URL: 'postgresql://fake:fake@localhost/fake', // Para teste sem DB real
  JWT_SECRET: 'test-jwt-secret-for-render-simulation',
  SESSION_SECRET: 'test-session-secret-for-render-simulation'
};

async function testEndpoint(url, expectedStatus = 200) {
  try {
    const response = await fetch(url);
    const isSuccess = response.status === expectedStatus;
    console.log(`${isSuccess ? '‚úÖ' : '‚ùå'} ${url} - Status: ${response.status}`);
    return isSuccess;
  } catch (error) {
    console.log(`‚ùå ${url} - Erro: ${error.message}`);
    return false;
  }
}

async function simulateRender() {
  console.log('üöÄ Iniciando servidor em modo produ√ß√£o...');
  
  const serverProcess = spawn('node', ['dist/index.js'], {
    env: { ...process.env, ...renderEnv },
    stdio: 'pipe'
  });
  
  let serverReady = false;
  
  // Monitorar logs do servidor
  serverProcess.stdout.on('data', (data) => {
    const output = data.toString();
    if (output.includes('serving on port')) {
      serverReady = true;
      console.log('‚úÖ Servidor iniciado com sucesso');
    }
  });
  
  serverProcess.stderr.on('data', (data) => {
    console.log(`‚ö†Ô∏è Server stderr: ${data}`);
  });
  
  // Aguardar servidor iniciar
  await new Promise(resolve => {
    const checkReady = setInterval(() => {
      if (serverReady) {
        clearInterval(checkReady);
        resolve();
      }
    }, 500);
    
    // Timeout ap√≥s 15 segundos
    setTimeout(() => {
      clearInterval(checkReady);
      resolve();
    }, 15000);
  });
  
  if (!serverReady) {
    console.log('‚ùå Servidor n√£o iniciou a tempo');
    serverProcess.kill();
    return false;
  }
  
  // Aguardar um pouco mais para estabilizar
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  console.log('\nüß™ Testando endpoints essenciais...');
  
  const baseUrl = `http://localhost:${renderEnv.PORT}`;
  const tests = [
    { url: `${baseUrl}/health`, name: 'Health Check' },
    { url: `${baseUrl}/ready`, name: 'Readiness Check' },
    { url: `${baseUrl}/_health`, name: 'Alternative Health Check' },
    { url: `${baseUrl}/`, name: 'Homepage' },
    { url: `${baseUrl}/admin/login`, name: 'Admin Login Page' },
    { url: `${baseUrl}/api/plans`, name: 'API Plans' },
  ];
  
  let passedTests = 0;
  
  for (const test of tests) {
    console.log(`üîç Testando ${test.name}...`);
    const success = await testEndpoint(test.url);
    if (success) passedTests++;
  }
  
  console.log(`\nüìä Resultados: ${passedTests}/${tests.length} endpoints funcionando`);
  
  // Testar funcionalidades espec√≠ficas
  console.log('\nüéØ Testando funcionalidades espec√≠ficas...');
  
  try {
    // Testar captura de leads
    const leadResponse = await fetch(`${baseUrl}/api/track-whatsapp`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: 'Teste Render',
        phone: '16999887766',
        email: 'teste@render.com',
        interest: 'plano-individual'
      })
    });
    
    console.log(`${leadResponse.ok ? '‚úÖ' : '‚ùå'} Captura de leads WhatsApp - Status: ${leadResponse.status}`);
    
  } catch (error) {
    console.log(`‚ùå Captura de leads - Erro: ${error.message}`);
  }
  
  // Finalizar teste
  console.log('\nüõë Finalizando simula√ß√£o...');
  serverProcess.kill();
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const overallSuccess = passedTests >= 4; // Pelo menos 4 dos 6 endpoints b√°sicos
  
  console.log('\n' + '‚ïê'.repeat(50));
  if (overallSuccess) {
    console.log('üéâ SIMULA√á√ÉO RENDER PASSOU!');
    console.log('‚úÖ Projeto pronto para deploy no Render.com');
    console.log('\nüìã Checklist final:');
    console.log('   ‚úÖ Servidor inicia corretamente');
    console.log('   ‚úÖ Health checks funcionando');
    console.log('   ‚úÖ API endpoints respondendo');
    console.log('   ‚úÖ Frontend servindo corretamente');
    console.log('   ‚úÖ Configura√ß√£o de produ√ß√£o OK');
  } else {
    console.log('‚ùå SIMULA√á√ÉO RENDER FALHOU!');
    console.log('‚ö†Ô∏è Verifique os problemas acima antes do deploy');
  }
  
  return overallSuccess;
}

// Verificar se o build existe
import fs from 'fs';
if (!fs.existsSync('dist/index.js')) {
  console.log('‚ùå Build n√£o encontrado. Executando build primeiro...');
  console.log('üì¶ npm run build');
  
  const buildProcess = spawn('npm', ['run', 'build'], { stdio: 'inherit' });
  
  buildProcess.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Build conclu√≠do com sucesso\n');
      simulateRender();
    } else {
      console.log('‚ùå Build falhou');
      process.exit(1);
    }
  });
} else {
  simulateRender();
}